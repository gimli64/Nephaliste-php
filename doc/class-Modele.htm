<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
	<title>class Modele</title>
	<link type="text/css" rel="stylesheet" href="$resources/style.css"/>
	<script type="text/javascript" language="javascript" src="$resources/treeview.js"></script>
</head>
<body onload="toggler.setupTreeView('MainList');toggler.backToMemorizedState('MainList', 'btnToggle')">
	<ul class="navig">
	<li><a href="javascript:toggler.toggleAll('MainList', 'btnToggle')" class="expandAllBtn" id="btnToggle">Expand all</a></li><li><a href="help.htm" class="helpBtn">Help</a></li><li><a href="index-all.htm" class="indexAllBtn">Index</a></li><li><a href="class-SoldeInsuffisantException.htm" class="left">Prev class</a></li><li><a href="package-summary.htm" class="top">Package</a></li><li><a href="class-Historique.htm" class="right">Next class</a></li>
	</ul>
	<h1 class="class abstract">Modele</h1>
	<div id="MainList">
	<div class="description"><p>Abstract class <span class="title">Modele</span></p><ul class="description"><li>Petit ORM On l'utilise en en héritant Avantage d'en hériter : on peut définir d'autres méthodes, surcharger celles fournies <br />
classe = table objet = enregistrement</li><li class="smaller">@author Bruno Cauet &lt;bruno.cauet@supelec.fr&gt;, Jocelyn Caulet &lt;jocelyn.cauet@supelec.fr&gt;</li><li class="smaller">@version 0.1</li><li>All subclasses: <a href="class-Historique.htm" class="link2">Historique</a>, <a href="class-Parametre.htm" class="link2">Parametre</a>, <a href="class-Depot.htm" class="link2">Depot</a>, <a href="class-Recette.htm" class="link2">Recette</a>, <a href="class-Compte.htm" class="link2">Compte</a></li><li>File: modeles/Modele.php</li></ul></div><h2>Properties</h2><ul class="summary"><li class="Collapsed" id="_table"><a href="javascript:void(0);" class="property-pro" target="main">$_table</a><ul class="description"><li>Protected static <a href="datatype-mixed.htm" class="link">mixed</a> <span class="smallTitle">$_table</span></li><li>Nom de la table dont le modèle s'occupe</li></ul></li><li class="Collapsed" id="id"><a href="javascript:void(0);" class="property-pub" target="main">$id</a><ul class="description"><li>Public <a href="datatype-mixed.htm" class="link">mixed</a> <span class="smallTitle">$id</span></li><li>Colonnes obligatoires de la table</li></ul></li><li class="Collapsed" id="instances"><a href="javascript:void(0);" class="property-pro" target="main">$instances</a><ul class="description"><li>Protected static <a href="datatype-mixed.htm" class="link">mixed</a> <span class="smallTitle">$instances</span></li><li>Objets héritant de Modele déjà chargés (cache)</li></ul></li><li class="Collapsed" id="objetsLies"><a href="javascript:void(0);" class="property-pri" target="main">$objetsLies</a><ul class="description"><li>Private <a href="datatype-array.htm" class="link">array</a> <span class="smallTitle">$objetsLies</span><span class="defVal"> = array()</span></li><li>Éléments à sauvegarder quand l'objet actuel sera sauvegardé</li></ul></li></ul><h2>Functions</h2><ul class="summary"><li class="Collapsed" id="f4d84dc67b2c29"><a href="javascript:void(0);" class="method-pub" target="main">__construct</a>()<ul class="description"><li>Public <a href="datatype-void.htm" class="link">void</a> <span class="smallTitle">__construct</span>()</li><li>Constructeur : enregistre l'élément créé dans le tableau s'il existe déjà, et sinon ne fait rien</li></ul></li><li class="Collapsed" id="f4d84dc67b2ef3"><a href="javascript:void(0);" class="method-pub" target="main">getTable</a>()<ul class="description"><li>Public static <span class="link">nom</span> <span class="smallTitle">getTable</span>()</li><li>Renvoie le nom de la table</li><li class="smaller">@return nom de la table associée à la classe</li></ul></li><li class="Collapsed" id="f4d84dc67b31c6"><a href="javascript:void(0);" class="method-pub" target="main">instances</a>()<ul class="description"><li>Public static <span class="link">objet</span> <span class="smallTitle">instances</span>()</li><li>Renvoie un objet de requetes</li><li class="smaller">@return objet Query lié à cette classe</li></ul></li><li class="Collapsed" id="f4d84dc67b349f"><a href="javascript:void(0);" class="method-pro" target="main">lier</a>(<a href="class-Modele.htm" class="link">Modele</a> &#38;$objet)<ul class="description"><li>Protected <a href="datatype-void.htm" class="link">void</a> <span class="smallTitle">lier</span>(<a href="class-Modele.htm" class="link">Modele</a> &#38;$objet)</li><li>Lie un objet à $this, pour qu'il soit sauvegardé quand $this le sera (exemple : crédit d'un compte, on n'enregistre l'opération qu'à la sauvegarde de $this)</li></ul></li><li class="Collapsed" id="f4d84dc67b377c"><a href="javascript:void(0);" class="method-pri" target="main">vraiesValeurs</a>()<ul class="description"><li>Private <span class="link">table</span> <span class="smallTitle">vraiesValeurs</span>()</li><li>Rend un tableau nom =&gt; valeur pour chaque élément de l'objet. Utilisé par Query pour sauvegarder l'objet</li><li class="smaller">@return table nom =&gt; valeur réelle pour chaque attribut</li></ul></li><li class="Collapsed" id="f4d84dc67b3b40"><a href="javascript:void(0);" class="method-pub" target="main">sauver</a>()<ul class="description"><li>Public <span class="link">l'objet</span> <span class="smallTitle">sauver</span>()</li><li>Sauvegarde un objet, ou, s'il existe déjà (ligne dans la DB, son id existe), le met à jour Sauvegarde également les objets qui y sont liés Query::sauver() a besoin des vraies valeurs de $this (donc de la foreign key et pas de l'objet pointé. Il ne peut pas les récupérer, il faut donc les lui fournir. Pour cela, au lieu de lui passer $this, on lui passe $this-&gt;vraiesValeurs();</li><li class="smaller">@return l'objet (chaînage des requetes)</li></ul></li><li class="Collapsed" id="f4d84dc67b4084"><a href="javascript:void(0);" class="method-pub" target="main">delete</a>()<ul class="description"><li>Public <a href="datatype-void.htm" class="link">void</a> <span class="smallTitle">delete</span>()</li><li>Supprime un objet (de la DB, des instances enregistrées) Et s'il est lié quelque part ? - c'est ok : il y est par référence. Ca fait juste un indice qui disparaît (euh, c'est sûr ?)</li></ul></li><li class="Collapsed" id="f4d84dc67b446e"><a href="javascript:void(0);" class="method-pro" target="main">__tas</a>(<a href="datatype-mixed.htm" class="link">mixed</a> $classe, <a href="datatype-mixed.htm" class="link">mixed</a> $attribut)<ul class="description"><li>Protected <a href="class-Query.htm" class="link">Query</a> <span class="smallTitle">__tas</span>(<a href="datatype-mixed.htm" class="link">mixed</a> $classe, <a href="datatype-mixed.htm" class="link">mixed</a> $attribut)</li><li>A utiliser dans les classes client sous la forme public function Classe__tas () { //blahblah $this-&gt;__tas (Classe, attributPointant) } Pour remonter une foreignKey : dans classe, attribut est une foreignKey vers la classe courante (celle de $this) <br />
Par exemple :<br />
$compte de type compte $compte-&gt;Historique__tas() <br />
<br />
Problème : exécuter immédiat ! Pas glop ! -&gt; on l'enlève</li><li class="smaller">@param $classe Nom de la classe d'où part la foreign key</li><li class="smaller">@param $attribut La foreign key</li><li class="smaller">@return Query pointant sur un array d'instances de $classe avec leur foreign key $attribut pointant sur $this.</li></ul></li><li class="Collapsed" id="f4d84dc67b4aea"><a href="javascript:void(0);" class="method-pub" target="main">get</a>(<a href="datatype-mixed.htm" class="link">mixed</a> $id)<ul class="description"><li>Public static <span class="link">cette</span> <span class="smallTitle">get</span>(<a href="datatype-mixed.htm" class="link">mixed</a> $id)</li><li>Appelé par __get pour récupérer un objet à partir de son id, sans le reprendre dans la DB si possible Euh bin en fait si besoin ça le télécharge. Utile pour __set aussi.</li><li class="smaller">@param $id l'id de l'instance qu'on veut</li><li class="smaller">@return cette instance</li></ul></li><li class="Collapsed" id="f4d84dc67b4f89"><a href="javascript:void(0);" class="method-pub" target="main">__get</a>(<a href="datatype-mixed.htm" class="link">mixed</a> $cible)<ul class="description"><li>Public <span class="link">l'objet</span> <span class="smallTitle">__get</span>(<a href="datatype-mixed.htm" class="link">mixed</a> $cible)</li><li>Appelé lors d'une tentative d'accès à un attribut inacessible depuis l'extérieur Permet de gérer les Foreign keys : rend une instance de la classe en question Vérifie que l'attribut peut être demandé</li><li class="smaller">@param attribut non-visible de l'extérieur</li><li class="smaller">@return l'objet sur lequel la foreign key pointe</li></ul></li><li class="Collapsed" id="f4d84dc67b54fe"><a href="javascript:void(0);" class="method-pub" target="main">__set</a>(<a href="datatype-mixed.htm" class="link">mixed</a> $cible, <a href="class-Modele.htm" class="link">Modele</a> $valeur)<ul class="description"><li>Public <span class="link">l'objet</span> <span class="smallTitle">__set</span>(<a href="datatype-mixed.htm" class="link">mixed</a> $cible, <a href="class-Modele.htm" class="link">Modele</a> $valeur)</li><li>Tout comme get</li><li class="smaller">@param $cible nom de la variable contenant l'objet lié qu'on veut changer</li><li class="smaller">@param $valeur la valeur qu'on veut lui affecter</li><li class="smaller">@return l'objet (chaînage)</li></ul></li><li class="Collapsed" id="f4d84dc67b5a73"><a href="javascript:void(0);" class="method-pri" target="main">enregistrer</a>()<ul class="description"><li>Private <a href="datatype-void.htm" class="link">void</a> <span class="smallTitle">enregistrer</span>()</li><li>Ajoute l'objet actuel à self::$instances</li></ul></li></ul>
	</div>
	<div id="footer">Documentation generated on Mar 19, 2011, 17:40:07 +0100 by <a href="http://pear.php.net/package/PHP_UML/" target="_new">PHP_UML</a></div>
</body>
</html>